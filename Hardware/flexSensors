/****************************************************************************** 
Flex sensor debug + robust mapping
- Prints ADC, voltage, resistance, baseline, deltaR, angle
- Uses float math, clamps, deadband, smoothing
******************************************************************************/

const int FLEX_PINS[5] = {A1, A2, A3, A4, A5};
const char* DIRECTIONS[5] = {"R", "MT", "MM", "MB", "L"};

const float VCC = 4.98;
const float R_DIV = 47500.0;

const float STRAIGHT_RESISTANCE = 37300.0;
const float BEND_RESISTANCE = 90000.0;

float baselineResistance[5];
float angles[5];

const int NUM_BASELINE_SAMPLES = 100;
const int READ_AVG_SAMPLES = 12;
const float DEAD_BAND_OHMS = 50.0;   // ignore changes smaller than this
const float SMOOTH_ALPHA = 0.35;     // exponential smoothing

float lastAngle[5] = {0,0,0,0,0};
float bendResistance[5];

float readAvgADC(int pin, int samples) {
  long sum = 0;
  for (int i = 0; i < samples; i++) {
    sum += analogRead(pin);
    delay(3);
  }
  return sum / (float)samples;
}

float adcToVoltage(float adc) {
  return adc * VCC / 1023.0;
}

float voltageToResistance(float v) {
  // Guard: avoid dividing by very small v
  if (v < 0.01) v = 0.01;
  return R_DIV * (VCC / v - 1.0);
}

void setup() {
  Serial.begin(115200);
  for (int i = 0; i < 5; i++) pinMode(FLEX_PINS[i], INPUT);

  Serial.println();
  Serial.println("Hold sensors straight for baseline calibration...");
  delay(2000);

  for (int i = 0; i < 5; i++) {
    float adcAvg = readAvgADC(FLEX_PINS[i], NUM_BASELINE_SAMPLES);
    float v = adcToVoltage(adcAvg);
    baselineResistance[i] = voltageToResistance(v);
    bendResistance[i] = baselineResistance[i] * 2.0; 
    Serial.print("Baseline S"); Serial.print(i+1);
    Serial.print(" ("); Serial.print(DIRECTIONS[i]); Serial.print(") ");
    Serial.print(" ADC="); Serial.print(adcAvg,1);
    Serial.print(" V="); Serial.print(v,3);
    Serial.print(" Rbaseline="); Serial.print(baselineResistance[i],1);
    Serial.println(" ohm");
  }
  
  Serial.println("Calibration complete.\n");
}

void loop() {
  for (int i = 0; i < 5; i++) {
    float adc = readAvgADC(FLEX_PINS[i], READ_AVG_SAMPLES);
    float v   = adcToVoltage(adc);
    float r   = voltageToResistance(v);

    // Resistance change from baseline
    float deltaR = r - baselineResistance[i];

    // Remove tiny noise
    if (fabs(deltaR) < DEAD_BAND_OHMS) deltaR = 0;

    // Force inside [0, maxDelta]
    if (deltaR < 0) deltaR = 0;
    if (deltaR > (BEND_RESISTANCE - STRAIGHT_RESISTANCE))
        deltaR = BEND_RESISTANCE - STRAIGHT_RESISTANCE;

    float rawAngle = (deltaR / (BEND_RESISTANCE - STRAIGHT_RESISTANCE)) * 60.0;

    // Smooth and store
    angles[i] = SMOOTH_ALPHA * rawAngle + (1.0 - SMOOTH_ALPHA) * lastAngle[i];
    lastAngle[i] = angles[i];
  }

  // Print everything on one line
  for (int i = 0; i < 5; i++) {
    Serial.print(DIRECTIONS[i]);
    Serial.print(": ");
    Serial.print(angles[i], 1);
    if (i < 4) Serial.print("  ");
  }
  Serial.println();

  delay(300);
}





